# -*- coding: utf-8 -*-
"""Despliegue de resultados modelo .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13R0xNx2RmeakYlndnpe981nXd2v8wjmx

#Despliegue de resultados del modelo de Machine Learning


**Nota:** Para que corra el modelo hay que agregar el dataset y el modelo que trabajó cada grupo de manera individual

El **primer paso** es guardar el modelo y la lista de las columnas entrenadas en una variable
"""

# Suponiendo que se trabajó con REGRESIÓN LOGÍSTICA se guarda el modelo en la variable 'model' y la lista de las columnas entrenadas en la variable 'columns_train
model = LogisticRegression(max_iter=1000)
colummns_train=X_train.columns.tolist()

"""El **segundo paso** consiste en  convertir el modelo y las columans en un archivo pickle (.pkl) y crear una ruta donde se van a encontrar los archivos convertidos.


Para tener todo en la misma carpeta, se creó una carpeta en drive 'futbol_app' (se puede perosnalizar según el proyecto), donde se van a guardar los archivos pickle.

"""

#Rutas de los archivos
ruta_modelo = '/content/drive/MyDrive/dataset/futbol_act/futbol_app/modelo_futbol.pkl'
ruta_columnas = '/content/drive/MyDrive/dataset/futbol_act/futbol_app/columnas_modelo.pkl'

#Se importa la librería que permita convertir los objetos en archivos pickle
import joblib

#Se convierten los objetos en archivos pickle
joblib.dump(model, ruta_modelo)
joblib.dump(X_train.columns.tolist(), ruta_columnas)

"""El **tercer paso** consiste  en crear una carpeta (dentro de la carpeta 'futbol_app') llamada 'template' y guardar dentro de ella, el archivo 'formulario.html'(frontend)

El **cuarto paso** consiste  en realizar el backend del despliegue web que se realizará
"""

#Importar las funciones a partir del flask qu enos va a permitir crear un API
from flask import Flask, request, render_template
app = Flask(__name__)

# Modelo y columnas como archivos pickle (se agregan las rutas)
modelo = joblib.load(ruta_modelo)
columnas = joblib.load(ruta_columnas)


@app.route('/')
def home():
    return render_template('formulario.html')

@app.route('/predict', methods=['POST'])
def predict():
    # Obtener datos del formulario
    home_team = request.form['home_team']
    away_team = request.form['away_team']
    neutral = request.form['neutral'] == 'True'
    goals_home_3 = int(request.form['goals_home_3'])
    goals_away_3 = int(request.form['goals_away_3'])

    # Crear DataFramede entrada
    entrada = pd.DataFrame([[0]*len(columnas)], columns=columnas)
    col_home = f'home_team_{home_team}'
    col_away = f'away_team_{away_team}'
    if col_home in columnas:
        entrada[col_home] = 1
    if col_away in columnas:
        entrada[col_away] = 1
    if 'neutral' in columnas:
        entrada['neutral'] = int(neutral)
    if 'goals_home_3' in columnas:
        entrada['goals_home_3'] = goals_home_3
    if 'goals_away_3' in columnas:
        entrada['goals_away_3'] = goals_away_3

    # Predicción
    resultado = modelo.predict(entrada)[0]
    salida = {0: 'Empate', 1: 'Pierde Local', 2: 'Gana Local'}

    return render_template('formulario.html',prediction=salida[resultado])


if __name__ == '__main__':
    app.run(debug=True)